@using QueflityMVC.Domain.Interfaces
@using QueflityMVC.Web.Common
@model QueflityMVC.Application.ViewModels.Message.ConversationVm
@inject IMessageDateTimeFormatter dateTimeFormatter
@inject IUserContext UserContext

@{
    ViewData["Title"] = "Messages";
}

@section Styles{
    <style>
    .conversation-wrapper {
        display: flex;
        flex-direction: column;
        height: 100%;
    }
    .top-bar {
        background-color: #f8f9fa;
        padding: 10px;
        border-bottom: 1px solid #dee2e6;
        width: 100%;
    }
    .main-content {
        display: flex;
        flex: 1;
        overflow: hidden;
    }
    .left-panel {
        background-color: #f8f9fa;
        padding: 15px;
        border-right: 1px solid #dee2e6;
        overflow-y: auto;
        flex: 0 0 25%;
    }
    .right-panel {
        padding: 15px;
        display: flex;
        flex-direction: column;
        flex: 1;
        overflow: hidden;
    }
    
    .message-space {
        flex: 1;
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
    }
</style>

    <link href="@Url.Content("~/css/messages.css")" rel="stylesheet" type="text/css"/>
}

<input type="hidden" id="messagesData" value="@Json.Serialize(Model.Messages.Entities)"/>

<div class="container-fluid conversation-wrapper">
    <div class="row">
        <div class="col-12 top-bar">
            <h4>@Model.Title</h4>
        </div>
    </div>
    <div class="main-content">
        <div class="left-panel">
            <h5>Product Details</h5>
            <p>
                <strong>Name:</strong> @Model.Product.Name
            </p>
            <p>
                <strong>Price:</strong> @Model.Product.Price.ToString("C")
            </p>
        </div>
        <div class="right-panel">
            <div class="message-space">
                <div class="messages-container" id="messagesList">

                </div>
            </div>

            <div class="input-group">
                <input type="text" class="form-control" placeholder="Type your message here..." id="newMessageContent">
                <div class="input-group-append">
                    <button class="btn btn-primary" type="button" id="sendMessageButton">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/messages.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const messagesData = document.getElementById("messagesData").value;
            const messages = JSON.parse(messagesData);
            const currentUserId = "@UserContext.UserId";

            renderMessages(messages, currentUserId);
        });

        // Function to render messages from JSON data
        function renderMessages(messages, currentUserId) {
            messages.forEach(message => {
                const messageDiv = createMessageDiv(message, currentUserId);
                $('#messagesList').append(messageDiv);
            });
        }
    </script>

    <script type="text/javascript">
        // Configure connection with server.
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/messageHub", {
                transport: signalR.HttpTransportType.LongPolling | signalR.HttpTransportType.ServerSentEvents
            })
            .build();
            
        // Start connection and listen to conversation.
        connection.start().then(() => {
            const conversationId = @Model.Id; // Replace with actual conversation ID
            connection.invoke("JoinGroup", conversationId).catch(err => console.error(err.toString()));
        }).catch(err => console.error(err.toString()));

        // Bind new message behavior.
        connection.on("ReceiveMessage", (message) => {
            console.log("Got message:");
            console.log(message);
            const msg = createMessageDiv(message, "@UserContext.UserId");
            $('#messagesList').append(msg);
        });
        
        // Handle SignalR connection close event
        connection.onclose(error => {
            if (error) {
                console.error("Connection closed with error: " + error);
            } else {
                console.log("Connection closed.");
            }
            // Redirect to login page if the connection is closed due to unauthorized access
            if (error && error.statusCode === 401) {
                window.location.href = "/login";
            }
        });
    </script>

    <script>
    $(document).ready(function () {
        $('#sendMessageButton').on('click', function () {
            var content = $('#newMessageContent').val();
            if (content) {
                const conversationId = @Model.Id; // Replace with actual conversation ID
                connection.invoke("SendMessageToGroup", conversationId, content).catch(err => console.error(err.toString()));
                $('#newMessageContent').val(''); // Clear the input field after sending
            }
        });
    });
    </script>
}